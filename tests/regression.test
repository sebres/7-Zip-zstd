# regression.test --
#
# Regressions tests for archives compressed with previous version
# Part of 7-zip ZS test suite.
#
# Copyright (c) 2025- by Sergey G. Brester aka sebres

if {[namespace which -command "::7z"] eq ""} {
  source [file join [file dirname [info script]] 7z.tcl]
}

testConstraint 64bit7z [regexp -nocase {\((?:x|arm)64\)} [7z --version]]; # like 7-Zip 24.09 ZS ... (x64)
testConstraint freeMem9G [expr {[apply {{} {
		if {![catch {exec wmic OS get FreePhysicalMemory} res]} {
			if {[regexp {^FreePhysicalMemory\s+(\d+)} $res {} res]} {
				return $res
			}
		}
		return -1
	}}] >= 8.5*1024*1024
}]

test regression--test-all {7z regression test for with previous versions compressed files, test with checksum} {
	variable 7Z_REGR_TEST_DIR
	variable 7Z_PWD
	set ret {}
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR *.*]] {
		set opt {}
		if {[string match xenc-* [file tail $p]]} { # encrypted with password
			set opt -p$7Z_PWD
		}
		set res [7z t -scrcSHA256 {*}$opt -- $p]
		set res [lrange [regexp -inline -expanded {
			\n(Path)\s*=\s*[^\n]*[\\/]([^\\/\n]+)
			\n(Type)\s*=\s*(\S*)
			(?:
				(?:\n(?!Method)[^\n]*){0,3}
			  (?:\n(Method)\s*=\s*(\S+))?
			)?
			(?:\n(?!Everything)[^\n]*){0,5}
			\nEverything\s+is\s+Ok
			(?:\n(?!Size)[^\n]*){0,5}
			\n(Size):\s*(\d+)
			(?:\n(?!SHA256)[^\n]*){0,5}
			\n(SHA256)\s+for\s+data:\s+(\S+)
			(?:\n(SHA256)\s+for\s+data\s+and\s+names:\s+(\S+))?
		} $res] 1 end]
		if {[lindex $res end] eq {}} {set res [lreplace $res end-1 end]}; # CRC with names is only for archives with multiple files
		lappend ret [file tail $p] $res
	}
	lappend ret OK
	join $ret \n
} [join {
	test-sol.7z
		{Path test-sol.7z Type 7z Method LZMA2:1536k Size 1100000 SHA256 975929a8472f0c34f13f187152b8d6aa021cbb39ef3c470eb892ab64424c8dbe-00000000 SHA256 bfe35415b7f77943de92e477da109c0ef7748bd41ff6a01a6215905860b694a0-00000000}
	test-sol.br.7z
		{Path test-sol.br.7z Type 7z Method BROTLI Size 1100000 SHA256 975929a8472f0c34f13f187152b8d6aa021cbb39ef3c470eb892ab64424c8dbe-00000000 SHA256 bfe35415b7f77943de92e477da109c0ef7748bd41ff6a01a6215905860b694a0-00000000}
	test-sol.zstd.7z
		{Path test-sol.zstd.7z Type 7z Method ZSTD Size 1100000 SHA256 975929a8472f0c34f13f187152b8d6aa021cbb39ef3c470eb892ab64424c8dbe-00000000 SHA256 bfe35415b7f77943de92e477da109c0ef7748bd41ff6a01a6215905860b694a0-00000000}
	test-sol.zstd.max.7z
		{Path test-sol.zstd.max.7z Type 7z Method ZSTD Size 1100000 SHA256 975929a8472f0c34f13f187152b8d6aa021cbb39ef3c470eb892ab64424c8dbe-00000000 SHA256 bfe35415b7f77943de92e477da109c0ef7748bd41ff6a01a6215905860b694a0-00000000}
	test.txt.7z
		{Path test.txt.7z Type 7z Method LZMA2:20 Size 1000000 SHA256 aeda0f81c8376d1678af53927a08cf641cafab8b68aef509c881eb0be0bc3c97}
	test.txt.br
		{Path test.txt.br Type brotli {} {} Size 1000000 SHA256 aeda0f81c8376d1678af53927a08cf641cafab8b68aef509c881eb0be0bc3c97}
	test.txt.br.7z
		{Path test.txt.br.7z Type 7z Method BROTLI Size 1000000 SHA256 aeda0f81c8376d1678af53927a08cf641cafab8b68aef509c881eb0be0bc3c97}
	test.txt.zstd
		{Path test.txt.zstd Type zstd {} {} Size 1000000 SHA256 aeda0f81c8376d1678af53927a08cf641cafab8b68aef509c881eb0be0bc3c97}
	test.txt.zstd.7z
		{Path test.txt.zstd.7z Type 7z Method ZSTD Size 1000000 SHA256 aeda0f81c8376d1678af53927a08cf641cafab8b68aef509c881eb0be0bc3c97}
	xenc-pwd-sol.zstd.7z
		{Path xenc-pwd-sol.zstd.7z Type 7z {} {} Size 1100000 SHA256 975929a8472f0c34f13f187152b8d6aa021cbb39ef3c470eb892ab64424c8dbe-00000000 SHA256 bfe35415b7f77943de92e477da109c0ef7748bd41ff6a01a6215905860b694a0-00000000}
	OK
} \n]

test regression--list-tech-info {7z regression test for with previous versions compressed files, list with technical info} {
	variable 7Z_REGR_TEST_DIR
	variable 7Z_PWD
	set ret {}
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR *.*]] {
		set opt {}
		if {[string match xenc-* [file tail $p]]} { # encrypted with password
			set opt -p$7Z_PWD
		}
		lappend ret [file tail $p] [7z_get_info {*}$opt -- $p]
	}
	lappend ret OK
	join $ret \n
} [join {
	test-sol.7z
		{Path test-sol.7z Type 7z Solid + Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method LZMA2:1536k} {Path tesx.txt Size 100000 Modified 1743709207 CRC 7ECE9EBC Method LZMA2:1536k}}}
	test-sol.br.7z
		{Path test-sol.br.7z Type 7z Solid + Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method Brotli:l9} {Path tesx.txt Size 100000 Modified 1743709207 CRC 7ECE9EBC Method Brotli:l9}}}
	test-sol.zstd.7z
		{Path test-sol.zstd.7z Type 7z Solid + Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method ZSTD:l17} {Path tesx.txt Size 100000 Modified 1743709207 CRC 7ECE9EBC Method ZSTD:l17}}}
	test-sol.zstd.max.7z
		{Path test-sol.zstd.max.7z Type 7z Solid + Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method ZSTD:max} {Path tesx.txt Size 100000 Modified 1743709207 CRC 7ECE9EBC Method ZSTD:max}}}
	test.txt.7z
		{Path test.txt.7z Type 7z Solid - Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method LZMA2:20}}}
	test.txt.br
		{Path test.txt.br Type brotli}
	test.txt.br.7z
		{Path test.txt.br.7z Type 7z Solid - Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method Brotli:l9}}}
	test.txt.zstd
		{Path test.txt.zstd Type zstd}
	test.txt.zstd.7z
		{Path test.txt.zstd.7z Type 7z Solid - Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method ZSTD:l17}}}
	xenc-pwd-sol.zstd.7z
		{Path xenc-pwd-sol.zstd.7z Type 7z Solid + Files {{Path test.txt Size 1000000 Modified 1743632719 CRC C601982A Method ZSTD:l17} {Path tesx.txt Size 100000 Modified 1743709207 CRC 7ECE9EBC Method ZSTD:l17}}}
	OK
} \n]

test regression--decompress {7z regression test for with previous versions compressed files, decompression} {
	variable 7Z_REGR_TEST_DIR
	variable 7Z_PWD
	set ret {}
	set regr_arc_data(txt) "TEST\n[string repeat { } 999990]\nEND."
	set regr_arc_data(sol) "$regr_arc_data(txt)1234\n[string repeat { } 99990]\n5678"
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR *.*]] {
		set opt {}
		if {[string match xenc-* [file tail $p]]} { # encrypted with password
			set opt -p$7Z_PWD
		}
		set res [7z e -so {*}$opt -- $p]
		if {![string match "*-sol*" [file tail $p]]} {
			set v [string equal [string trimright $res] $regr_arc_data(txt)]
		} else {
			set v [string equal [string trimright $res] $regr_arc_data(sol)]
		}
		lappend ret [file tail $p] $v
	}
	set ret
} [list {*}{
	test-sol.7z      1
	test-sol.br.7z   1
	test-sol.zstd.7z 1
	test-sol.zstd.max.7z 1
	test.txt.7z      1
	test.txt.br      1
	test.txt.br.7z   1
	test.txt.zstd    1
	test.txt.zstd.7z 1
	xenc-pwd-sol.zstd.7z 1
}]

set tmpdir [file join [temporaryDirectory] 7z-test-[format %x-%lx [pid] [clock microseconds]]]
file mkdir $tmpdir

test regression--compress-zstd-max-allowed {zstd compression for 64-bit only, fallback to highest level} -constraints {!64bit7z} -body {
	variable 7Z_REGR_TEST_DIR
	set ret {}
	foreach m {zstd brotli lz5} {
		set p [file join $tmpdir test-advmax-compress.7z]; file delete $p
		# this shall switch to l22 in 32-bit for zstd (no max by 32-bit), and to l11 for brotli and to l15 for lz5:
		7z a -m0=${m}:max -- $p [file join $7Z_REGR_TEST_DIR ../7z-test.tcl]
		assertLogged {Everything is Ok}
		set res [7z_get_info -- $p]
		foreach fi [dict get $res Files] {
			# compression method and method:level:
			lappend ret $m [dict get $fi Method]
		}
	}
	set ret
} -cleanup {
	file delete $p
} -result [list {*}{
	zstd    ZSTD:l22
	brotli  Brotli:l11
	lz5     LZ5:l15
}]

test regression--preserve-method-non-solid {7z add/del file in non-solid archive (preserve compression method, bug #340)} {
	variable 7Z_REGR_TEST_DIR
	set ret {}
	# add (note that by LZMA2 it'd be unable to get the level from archive and fallback to default):
	lappend ret ===add===
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR test.txt*.7z]] {
		file copy $p [set p [file join $tmpdir [file tail $p]]]
		7z a -siabcd.txt -- $p << "This is a test string passed via stdin: [string repeat abcd 1000]"
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 1 file, 1000000 bytes} {\nAdd new data to archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
	}
	# delete:
	lappend ret ===del===
	foreach p [lsort -dictionary [glob -directory $tmpdir test.txt*.7z]] {
		7z d -- $p abcd.txt
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 1 file, 1000000 bytes} {\nDelete data from archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
		file delete $p
	}
	join $ret \n
} [join {
	===add===
	test.txt.7z
		{Solid - test.txt LZMA2:20 abcd.txt LZMA2:12}
	test.txt.br.7z
		{Solid - test.txt Brotli:l9 abcd.txt Brotli:l9}
	test.txt.zstd.7z
		{Solid - test.txt ZSTD:l17 abcd.txt ZSTD:l17}
	===del===
	test.txt.7z
		{Solid - test.txt LZMA2:20}
	test.txt.br.7z
		{Solid - test.txt Brotli:l9}
	test.txt.zstd.7z
		{Solid - test.txt ZSTD:l17}
} \n]

test regression--preserve-method-non-solid2 {7z add/del file in non-solid archive (preserve compression method, bug #340)} {
	# same as regression--preserve-method-non-solid, but compress added file using new method:level (from cmd-line):
	variable 7Z_REGR_TEST_DIR
	set ret {}
	# add (note that by LZMA2 it'd be unable to get the level from archive and fallback to default):
	lappend ret ===add===
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR test.txt*.7z]] {
		file copy $p [set p [file join $tmpdir [file tail $p]]]
		7z u -m0=zstd:x1 -siabcd.txt -- $p << "This is a test string passed via stdin: [string repeat abcd 1000]"
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 1 file, 1000000 bytes} {\nAdd new data to archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
	}
	# delete:
	lappend ret ===del===
	foreach p [lsort -dictionary [glob -directory $tmpdir test.txt*.7z]] {
		7z d -ms=off -- $p abcd.txt
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 1 file, 1000000 bytes} {\nDelete data from archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
		file delete $p
	}
	join $ret \n
} [join {
	===add===
	test.txt.7z
		{Solid - test.txt LZMA2:20 abcd.txt ZSTD:l1}
	test.txt.br.7z
		{Solid - test.txt Brotli:l9 abcd.txt ZSTD:l1}
	test.txt.zstd.7z
		{Solid - test.txt ZSTD:l17 abcd.txt ZSTD:l1}
	===del===
	test.txt.7z
		{Solid - test.txt LZMA2:20}
	test.txt.br.7z
		{Solid - test.txt Brotli:l9}
	test.txt.zstd.7z
		{Solid - test.txt ZSTD:l17}
} \n]

test regression--preserve-method-solid {7z add/del file in solid archive (preserve compression method, bug #340)} {
	variable 7Z_REGR_TEST_DIR
	set ret {}
	# add (note that by LZMA2 it'd be unable to get the level from archive and fallback to default):
	lappend ret ===add===
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR test-sol*.7z]] {
		if {[string match *.max.7z $p]} continue; # may be too memory greedy
		file copy $p [set p [file join $tmpdir [file tail $p]]]
		7z a -siabcd.txt -- $p << "This is a test string passed via stdin: [string repeat abcd 1000]"
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 2 files, 1100000 bytes} {\nAdd new data to archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
	}
	# delete:
	lappend ret ===del===
	foreach p [lsort -dictionary [glob -directory $tmpdir test-sol*.7z]] {
		if {[string match *.max.7z $p]} continue; # may be too memory greedy
		7z d -- $p abcd.txt
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 2 files, 1100000 bytes} {\nDelete data from archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
		file delete $p
	}
	join $ret \n
} [join {
	===add===
	test-sol.7z
		{Solid + test.txt LZMA2:1536k tesx.txt LZMA2:1536k abcd.txt LZMA2:12}
	test-sol.br.7z
		{Solid + test.txt Brotli:l9 tesx.txt Brotli:l9 abcd.txt Brotli:l9}
	test-sol.zstd.7z
		{Solid + test.txt ZSTD:l17 tesx.txt ZSTD:l17 abcd.txt ZSTD:l17}
	===del===
	test-sol.7z
		{Solid + test.txt LZMA2:1536k tesx.txt LZMA2:1536k}
	test-sol.br.7z
		{Solid + test.txt Brotli:l9 tesx.txt Brotli:l9}
	test-sol.zstd.7z
		{Solid + test.txt ZSTD:l17 tesx.txt ZSTD:l17}
} \n]

test regression--preserve-method-solid-max {7z add/del file in solid (max) archive} -constraints {freeMem9G && !fast} -body {
	variable 7Z_REGR_TEST_DIR
	set ret {}
	# add (note that by LZMA2 it'd be unable to get the level from archive and fallback to default):
	lappend ret ===add===
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR test-sol*.max.7z]] {
		file copy $p [set p [file join $tmpdir [file tail $p]]]
		7z a -siabcd.txt -- $p << "This is a test string passed via stdin: [string repeat abcd 1000]"
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 2 files, 1100000 bytes} {\nAdd new data to archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
	}
	# delete:
	lappend ret ===del===
	foreach p [lsort -dictionary [glob -directory $tmpdir test-sol*.max.7z]] {
		7z d -- $p abcd.txt
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 2 files, 1100000 bytes} {\nDelete data from archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
		file delete $p
	}
	join $ret \n
	# note that result for 32-bit is a bit different - because max is disallowed for 32-bit,
	# new file abcd.txt will be compressed with l22 instead of max...
} -result [join [subst {
	===add===
	test-sol.zstd.max.7z
		{Solid + test.txt ZSTD:max tesx.txt ZSTD:max abcd.txt ZSTD:[expr {[testConstraint 64bit7z] ? "max":"l22"}]}
	===del===
	test-sol.zstd.max.7z
		{Solid + test.txt ZSTD:max tesx.txt ZSTD:max}
}] \n]

test regression--preserve-method-solid2 {7z add/del file in solid archive (preserve compression method, bug #340)} {
	# same as regression--preserve-method-solid, but recompress solid block using new method:level (from cmd-line):
	variable 7Z_REGR_TEST_DIR
	set ret {}
	# add (note that by LZMA2 it'd be unable to get the level from archive and fallback to default):
	lappend ret ===add===
	foreach p [lsort -dictionary [glob -directory $7Z_REGR_TEST_DIR test-sol*.7z]] {
		file copy $p [set p [file join $tmpdir [file tail $p]]]
		7z a -m0=zstd:x1 -ms=on -siabcd.txt -- $p << "This is a test string passed via stdin: [string repeat abcd 1000]"
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 2 files, 1100000 bytes} {\nAdd new data to archive: 1 file, 4040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
	}
	# delete (new file and one file from solid block, so it'd be recompressed and method given by cmd-line shall win):
	lappend ret ===del===
	foreach p [lsort -dictionary [glob -directory $tmpdir test-sol*.7z]] {
		7z d -m0=brotli:x1 -- $p abcd.txt test.txt
		assertLogged {\nUpdating archive} \
			{\nKeep old data in archive: 1 file, 100000 bytes} {\nDelete data from archive: 2 files, 1004040 bytes} \
			{\nEverything is Ok}
		#puts [7z l -slt -- $p]
		set res [7z_get_info -- $p] 
		set lst {}
		lappend lst Solid [dict get $res Solid]
		foreach fi [dict get $res Files] {
			lappend lst [dict get $fi Path] [dict get $fi Method]
		}
		lappend ret [file tail $p] $lst
		file delete $p
	}
	join $ret \n
} [join {
	===add===
	test-sol.7z
		{Solid + test.txt LZMA2:1536k tesx.txt LZMA2:1536k abcd.txt ZSTD:l1}
	test-sol.br.7z
		{Solid + test.txt Brotli:l9 tesx.txt Brotli:l9 abcd.txt ZSTD:l1}
	test-sol.zstd.7z
		{Solid + test.txt ZSTD:l17 tesx.txt ZSTD:l17 abcd.txt ZSTD:l1}
	test-sol.zstd.max.7z
		{Solid + test.txt ZSTD:max tesx.txt ZSTD:max abcd.txt ZSTD:l1}
	===del===
	test-sol.7z
		{Solid - tesx.txt Brotli:l1}
	test-sol.br.7z
		{Solid - tesx.txt Brotli:l1}
	test-sol.zstd.7z
		{Solid - tesx.txt Brotli:l1}
	test-sol.zstd.max.7z
		{Solid - tesx.txt Brotli:l1}
} \n]

file delete -force $tmpdir

::tcltest::cleanupTests
